지난시간에는 조회하는 게시글을 등록하고 조회해오는 api를 만듬
조회할때 응답을 생성할떄 PostResponse응답 서비스 정책에 맞는
응답전용클래스를 만들어서 생성을 했다. -> 응답을 만들어줌 

오늘은 조회용 api를 하나더 만든다. 
- 지난 시간 = 단건 조회 API (1개의 글을 가져오는 api)
  - 단건조회 findById
- 이번 시간 = 여러개의 글을 조회하는 api 
  - 여러개 조회 findAll
  - 예) 블로그 게시글 목록..작성된 목록, 페이징 처리도 하면서 가져옴 
  여러개의 글을 조회할때는 /posts 로 가져오면 될것같다. 

  ### GetMapping으로 /posts로 가져옴 
  getList()를 만들어줌 
  id는 필요없다. 최근에 등록된 글을 가져오기 때문에 
  
  1. 생성 
    @GetMapping("/posts")
    public List<Post> getList() {
        return postService.getList();
    }
  2. PostService에 들어가서 TestCase를 만든다. 


#### PostService에서 수정 
PostResponse를 생성해야하는 작업들이 많아진다. 
반복적인 작업이 늘어날 수 있어서 .builder()는 없애주고
PostResponse안에 들어가면 생성자 오버로딩을 통해서 
Post엔티티를 받는다. 받아서 값을 엔티티에서 조회하는 걸로 

1. 포스트서비스에서 수정을 한다.
  PostResponse.builder를 통해가지고 포스트에 대한 
  정보를 PostResponse로 컨버팅한다. -> 나중에 가다보면은 
  PostResponse를 생성해야되는 builder코드들이 많아진다. 
  - 반복적인 작업이 늘어날 수 있어 없애준다. 
2. PostResponse 에 생성자 오버로딩을 추가한다. 
  - 값을 하나하나 받게 되는데 생성자 오버로딩을 통해 
  Post엔티티를 받는다. 받아서 id, title, content값을 
  엔티티에서 조회해온다. 
  - 생성자를 하나 더 만들어준다. 

api를 만들었고, 애플리케이션을 만들어서 브라우저에서 확인.
H2데이터베이스를 사용함, 메모리 디비여서 서버가 내려갈때마다 데이터가 
삭제가 됨. 
데이터가 없는 상태에서 8080호출을 해도 빈 값이 나온다. 
데이터를 넣어주도록 한다. 

H2데이터베이스 연결
- resources > application.yml
  작성을 해주고 재시작을 한다. h2-console 생성이 된다. 
- 실행할때마다 달라진다. 복사해서 접속을 할 수 있다. 
  -> datasource: 
        url: 디비명을 적어주고
        username: sa
        password: 없는걸로 